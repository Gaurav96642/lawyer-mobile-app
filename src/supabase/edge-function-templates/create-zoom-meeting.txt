
// This is a template for a Supabase Edge Function to create Zoom meetings
// Save this file in your Supabase project's functions folder

import { serve } from 'https://deno.land/std@0.177.0/http/server.ts'
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
import { corsHeaders } from '../_shared/cors.ts'
import { encode as base64Encode } from 'https://deno.land/std@0.177.0/encoding/base64.ts'

// Set your Zoom API credentials as secrets in your Supabase dashboard
// ZOOM_API_KEY, ZOOM_API_SECRET, ZOOM_ACCOUNT_ID
const ZOOM_API_KEY = Deno.env.get('ZOOM_API_KEY') || ''
const ZOOM_API_SECRET = Deno.env.get('ZOOM_API_SECRET') || ''
const ZOOM_ACCOUNT_ID = Deno.env.get('ZOOM_ACCOUNT_ID') || ''

// Function to generate a Zoom JWT token
function generateZoomJWT() {
  const header = { alg: 'HS256', typ: 'JWT' }
  const payload = {
    iss: ZOOM_API_KEY,
    exp: Math.floor(Date.now() / 1000) + 3600, // Token expires in 1 hour
  }
  
  const encodedHeader = base64Encode(JSON.stringify(header))
    .replace(/\+/g, '-')
    .replace(/\//g, '_')
    .replace(/=/g, '')
    
  const encodedPayload = base64Encode(JSON.stringify(payload))
    .replace(/\+/g, '-')
    .replace(/\//g, '_')
    .replace(/=/g, '')
    
  const toSign = encodedHeader + '.' + encodedPayload
  
  const encoder = new TextEncoder()
  const secretBytes = encoder.encode(ZOOM_API_SECRET)
  const toSignBytes = encoder.encode(toSign)
  
  // Use the Web Crypto API to sign the JWT
  return crypto.subtle.importKey(
    'raw',
    secretBytes,
    { name: 'HMAC', hash: 'SHA-256' },
    false,
    ['sign']
  ).then(key => {
    return crypto.subtle.sign(
      'HMAC',
      key,
      toSignBytes
    )
  }).then(signature => {
    const encodedSignature = base64Encode(new Uint8Array(signature))
      .replace(/\+/g, '-')
      .replace(/\//g, '_')
      .replace(/=/g, '')
    
    return toSign + '.' + encodedSignature
  })
}

// Function to create a Zoom meeting using Zoom API
async function createZoomMeeting(topic, startTime, duration, timeZone) {
  try {
    const token = await generateZoomJWT()
    
    const meetingOptions = {
      topic,
      type: 2, // Scheduled meeting
      start_time: startTime,
      duration,
      timezone: timeZone,
      password: Math.random().toString(36).slice(-8), // Generate random password
      settings: {
        host_video: true,
        participant_video: true,
        join_before_host: false,
        mute_upon_entry: true,
        watermark: false,
        use_pmi: false,
        approval_type: 0,
        audio: 'both',
        auto_recording: 'none',
      },
    }
    
    const response = await fetch(`https://api.zoom.us/v2/users/me/meetings`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`,
      },
      body: JSON.stringify(meetingOptions),
    })
    
    if (!response.ok) {
      const errorText = await response.text()
      throw new Error(`Error creating Zoom meeting: ${response.status} ${errorText}`)
    }
    
    return await response.json()
  } catch (error) {
    console.error('Error in createZoomMeeting:', error)
    throw error
  }
}

serve(async (req) => {
  // Handle CORS
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }
  
  try {
    // Create a Supabase client with the Auth context of the logged-in user
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      {
        global: {
          headers: { Authorization: req.headers.get('Authorization')! },
        },
      }
    )
    
    // Get the JWT token from the authorization header
    const token = req.headers.get('Authorization')?.split(' ')[1]
    if (!token) {
      return new Response(JSON.stringify({ error: 'Unauthorized' }), {
        status: 401,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      })
    }
    
    // Verify the JWT and get the user
    const { data: { user }, error: userError } = await supabaseClient.auth.getUser(token)
    if (userError || !user) {
      return new Response(JSON.stringify({ error: 'Unauthorized', details: userError }), {
        status: 401,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      })
    }
    
    // Parse the request body
    const { appointmentId } = await req.json()
    if (!appointmentId) {
      return new Response(JSON.stringify({ error: 'Missing appointmentId parameter' }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      })
    }
    
    // Get the appointment details
    const { data: appointment, error: appointmentError } = await supabaseClient
      .from('appointments')
      .select(`
        *,
        client:profiles!client_id(first_name, last_name),
        lawyer:profiles!lawyer_id(first_name, last_name, specialty)
      `)
      .eq('id', appointmentId)
      .single()
    
    if (appointmentError || !appointment) {
      return new Response(JSON.stringify({ error: 'Appointment not found', details: appointmentError }), {
        status: 404,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      })
    }
    
    // Check if the user is either the client or the lawyer
    if (user.id !== appointment.client_id && user.id !== appointment.lawyer_id) {
      return new Response(JSON.stringify({ error: 'Not authorized to access this appointment' }), {
        status: 403,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      })
    }
    
    // Check if the appointment is scheduled
    if (appointment.status !== 'scheduled') {
      return new Response(JSON.stringify({ error: 'Cannot create meeting for a non-scheduled appointment' }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      })
    }
    
    // Check if a video session already exists
    const { data: existingSession } = await supabaseClient
      .from('video_sessions')
      .select('*')
      .eq('appointment_id', appointmentId)
      .not('meeting_id', 'eq', 'pending')
      .maybeSingle()
    
    if (existingSession && existingSession.meeting_id !== 'pending') {
      return new Response(JSON.stringify({ 
        videoSession: existingSession,
        message: 'Video session already exists for this appointment'
      }), {
        status: 200,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      })
    }
    
    // Calculate meeting duration in minutes
    const startTime = new Date(appointment.start_time)
    const endTime = new Date(appointment.end_time)
    const durationMinutes = Math.ceil((endTime.getTime() - startTime.getTime()) / (1000 * 60))
    
    // Create a descriptive topic for the Zoom meeting
    const topic = `Legal Consultation: ${appointment.lawyer.specialty || 'General'} - ${appointment.lawyer.first_name} ${appointment.lawyer.last_name} & ${appointment.client.first_name} ${appointment.client.last_name}`
    
    // Create Zoom meeting
    const zoomMeeting = await createZoomMeeting(
      topic,
      appointment.start_time,
      durationMinutes,
      'UTC' // You can make this dynamic based on user preferences
    )
    
    // Get the existing video session or create a new one
    let videoSessionId
    if (existingSession && existingSession.id) {
      videoSessionId = existingSession.id
      
      // Update the existing session with real Zoom data
      await supabaseClient
        .from('video_sessions')
        .update({
          meeting_id: zoomMeeting.id.toString(),
          host_url: zoomMeeting.start_url,
          join_url: zoomMeeting.join_url,
          password: zoomMeeting.password,
          start_url: zoomMeeting.start_url,
          status: 'created',
          provider_data: zoomMeeting,
          updated_at: new Date().toISOString()
        })
        .eq('id', existingSession.id)
    } else {
      // Create a new video session
      const { data: newSession, error: sessionError } = await supabaseClient
        .from('video_sessions')
        .insert({
          appointment_id: appointmentId,
          provider: 'zoom',
          meeting_id: zoomMeeting.id.toString(),
          host_url: zoomMeeting.start_url,
          join_url: zoomMeeting.join_url,
          password: zoomMeeting.password,
          start_url: zoomMeeting.start_url,
          status: 'created',
          provider_data: zoomMeeting,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        })
        .select()
        .single()
      
      if (sessionError) {
        throw sessionError
      }
      
      videoSessionId = newSession.id
    }
    
    // Update the appointment with the meeting URL
    await supabaseClient
      .from('appointments')
      .update({
        meeting_url: zoomMeeting.join_url,
        updated_at: new Date().toISOString()
      })
      .eq('id', appointmentId)
    
    // Return success response
    return new Response(JSON.stringify({
      success: true,
      videoSessionId,
      meeting: {
        id: zoomMeeting.id,
        join_url: zoomMeeting.join_url,
        start_url: zoomMeeting.start_url,
        password: zoomMeeting.password
      }
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    })
  } catch (error) {
    console.error('Error in create-zoom-meeting function:', error)
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    })
  }
})
